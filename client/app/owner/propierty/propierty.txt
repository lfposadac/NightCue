"use client";
import React, { useState, useEffect } from "react";
import {
  Container,
 // Table,
  Button,
  Modal,
  ModalHeader,
  ModalBody,
  ModalFooter,
  FormGroup,
  Label,
  Input,
} from "reactstrap";
import { Table, TableHead, TableBody, TableRow, TableCell } from "@mui/material";
import styles from "./propierty.module.css";
import OwnerLayout from "@/components/layouts/OwnerLayout";

type Propierty = {
  _id: string;
  userId: string;
  name: string;
  capacity: number;
  address: string;
  contact: string;
  schedule: string;
};

const Propierty = () => {
  const [propierties, setPropiertys] = useState<Propierty[]>([]);
  const [modal, setModal] = useState(false);
  const [selectedPropierty, setSelectedPropierty] = useState<Propierty | null>(null);
  const [editedPropierty, setEditedPropierty] = useState<Propierty | null>(null);


  const toggle = () => setModal(!modal);

  useEffect(() => {
    fetch("http://localhost:3000/api/v1/propierty")
      .then((response) => response.json())
      .then((data) => setPropiertys(data.data));
  }, []);

  const handleEdit = (propierty: Propierty) => {
    setSelectedPropierty(propierty);
    setEditedPropierty(propierty);
    toggle();
  };

  const handleDelete = (propierty: Propierty) => {
    fetch(`http://localhost:3000/api/v1/propierty/${propierty._id}`, {
      method: "DELETE",
    })
      .then((response) => response.json())
      .then((data) => {
        if (data.success) {
          setPropiertys(
            propierties.filter((propierty) => propierty._id !== data.data._id)
          );
        }
      })
      .catch((error) => {
        console.error("Error deleting propierty:", error);
      });
  };

  const handlePropiertyChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    if (editedPropierty) {
      setEditedPropierty({ ...editedPropierty, [name]: value });
    }
  };

  const saveChanges = () => {
    if (selectedPropierty) {
      const { _id, createdAt, updatedAt, __v, ...updatedPropierty } = editedPropierty; // Excluir las propiedades no permitidas

      fetch(`http://localhost:3000/api/v1/propierty/${selectedPropierty._id}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(updatedPropierty), // Enviar el objeto actualizado sin las propiedades no permitidas
      })
        .then((response) => response.json())
        .then((data) => {
          console.log(data);
          if (data.status === 200) {
            setPropiertys((prevPropiertys) =>
              prevPropiertys.map((propierty) =>
                propierty._id === data.data._id ? data.data : propierty
              )
            );
            toggle();
          } else {
            console.error("Error updating propierty:", data.error);
          }
        })
        .catch((error) => {
          console.error("Error updating propierty:", error);
        });
    }
  };

  return (
    <OwnerLayout>
      <Container className={styles.container}>
        <h2 className={styles.heading}>PROPIEDADES</h2>
        <p className={styles.subheading}>
        Informaci√≥n sobre las propiedades registradas.
        </p>
        <div className={styles.tableContainer}>
          
          <Table striped bordered hover className={styles.table}>
            <thead>
              <tr>
                <th>Name</th>
                <th>Capacity</th>
                <th>Address</th>
                <th>Contact</th>
                <th>Schedule</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              {propierties.map((propierty) => (
                <tr key={propierty._id}>
                  <td>{propierty.name}</td>
                  <td>{propierty.capacity}</td>
                  <td>{propierty.address}</td>
                  <td>{propierty.contact}</td>
                  <td>{propierty.schedule}</td>
                  <td>
                    <div className={styles.buttonContainer}>
                      <Button
                        variant="warning"
                        onClick={() => handleEdit(propierty)}
                        className={styles.button}
                      >
                        Editar
                      </Button>
                      <Button
                        variant="danger"
                        onClick={() => handleDelete(propierty)}
                        className={styles.button}
                      >
                        Eliminar
                      </Button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </Table> 
          
        </div>
        <Modal
          isOpen={modal}
          toggle={toggle}
          className={styles.modalContainer}
        >
          <ModalHeader toggle={toggle}>Editar Propiedad</ModalHeader>
          <ModalBody>
            <div className={styles.editContainer}>
              <FormGroup>
                <Label for="name">Name</Label>
                <Input
                  type="text"
                  name="name"
                  value={editedPropierty?.name || ""}
                  onChange={handlePropiertyChange}
                />
              </FormGroup>
              <FormGroup>
                <Label for="capacity">Capacity</Label>
                <Input
                  type="number"
                  name="capacity"
                  value={selectedPropierty?.capacity || ""}
                  onChange={handlePropiertyChange}
                />
              </FormGroup>
              <FormGroup>
                <Label for="address">Address</Label>
                <Input
                  type="text"
                  name="address"
                  value={selectedPropierty?.address || ""}
                  onChange={handlePropiertyChange}
                />
              </FormGroup>
              <FormGroup>
                <Label for="contact">Contact</Label>
                <Input
                  type="text"
                  name="contact"
                  value={selectedPropierty?.contact || ""}
                  onChange={handlePropiertyChange}
                />
              </FormGroup>
              <FormGroup>
                <Label for="schedule">Schedule</Label>
                <Input
                  type="text"
                  name="schedule"
                  value={selectedPropierty?.schedule || ""}
                  onChange={handlePropiertyChange}
                />
              </FormGroup>
            </div>
          </ModalBody>
          <ModalFooter>
            <Button
              color="primary"
              onClick={saveChanges}
              className={styles.button}
            >
              Save Changes
            </Button>
            <Button
              color="secondary"
              onClick={toggle}
              className={styles.button}
            >
              Cancel
            </Button>
          </ModalFooter>
        </Modal>
      </Container>
    </OwnerLayout>
  );
};

export default Propierty;